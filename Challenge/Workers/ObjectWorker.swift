//
//  ObjectListWorker.swift
//  challenge
//
//  Created by Michael Steudter on 12.07.22.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreData

// swiftlint:disable identifier_name
class ObjectWorker {

	/// The store in that the worker is manipulating data.
	var objectsStore: ObjectsStoreProtocol

	/// Initializes an `ObjectWorker`
	/// - Parameter objectsStore: The store in that the worker is manipulating data.
	init(objectsStore: ObjectsStoreProtocol) {
		self.objectsStore = objectsStore
	}

	// MARK: - FETCH

	/// Fetches all existing objects saved in `objectsStore`.
	/// - Returns: The objects.
	func fetchObjects() async -> [Object] {
		var retVal: [Object] = []
		do {
			retVal = try await objectsStore.fetchObjects()
		} catch {
			print("error fetching \(error)")
		}
		return retVal
	}

	/// Fetches object with a given `id`.
	/// - Parameter id: The string identifying the stored object.
	/// - Returns: The object associated with the `id`. `nil` if no object was found.
	func fetchObject(id: String) async -> Object? {
		await objectsStore.fetchObject(id: id)
	}

	// MARK: - CREATE

	/// Creates a representation for a given object in the store.
	/// - Parameter object: The object data to store.
	func createObject(object: Object) async {
		await objectsStore.createObject(objectToCreate: object)
	}

	// MARK: - UPDATE

	/// Updates given object.
	/// - Parameter object: The updated object data.
	func updateObject(object: Object) async {
		await objectsStore.updateObject(updatedObject: object)
	}

	// MARK: - DELETE

	/// Deletes object representation from store with given `id`.
	/// - Parameter id: The object's identifier.
	func deleteObject(id: String) async {
		await objectsStore.deleteObject(id: id)
	}
}
