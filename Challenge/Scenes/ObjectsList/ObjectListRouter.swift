//
//  ObjectListRouter.swift
//  challenge
//
//  Created by Michael Steudter on 12.07.22.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

@objc protocol ObjectListRoutingLogic {
	func routeToCreateObject() async
	func routeToEditObject(id: String) async
	func routeToAddRelationToObject(id: String, to objectId: String) async
}

protocol ObjectListDataPassing {
	var dataStore: ObjectListDataStore? { get }
}

class ObjectListRouter: NSObject, ObjectListRoutingLogic, ObjectListDataPassing {

	weak var viewController: ObjectListViewController?
	var dataStore: ObjectListDataStore?

	@MainActor
	func routeToCreateObject() async {
		let createEditVc = CreateAndEditObjectViewController()
		createEditVc.interactor?.createObject()
		viewController?.navigationController?.pushViewController(createEditVc, animated: true)
	}

	@MainActor
	func routeToEditObject(id: String) async {
		let createEditVc = CreateAndEditObjectViewController()
		await createEditVc.interactor?.fetchObjectForEditing(request: .init(id: id))
		viewController?.navigationController?.pushViewController(createEditVc, animated: true)
	}

	@MainActor
	func routeToAddRelationToObject(id: String, to objectId: String) async {
		// TODO: refactor.
		let editViewController = viewController?
			.navigationController?
			.viewControllers
			.compactMap { $0 as? CreateAndEditObjectViewController }.first
//		editViewController.interactor.
		viewController?.navigationController?.popViewController(animated: true)
	}
}
