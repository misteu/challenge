//
//  ObjectListInteractor.swift
//  challenge
//
//  Created by Michael Steudter on 12.07.22.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

/// Conforming classes interact with object lists.
protocol ObjectListBusinessLogic {
	/// List objects for searching/filtering and navigating to their edit screens.
	func listObjects(request: ListObjects.FetchObjects.Request) async
	/// Deletes object.
	func deleteObject(request: ListObjects.DeleteObject.Request) async
	/// Lists objects for selecting relations between objects.
	func listObjectSelector() async
	/// Adds object relations as selected in relation selection screen.
	func addObjectRelation(request: ListObjects.RelationSelector.Request) async
	/// Currently selected/edited object's id.
	var selectedObjectId: String? { get set }
	/// Fetches object.
	func fetchObject(request: CreateAndEditObject.FetchObject.Request) async -> Object?
}

final class ObjectListInteractor: ObjectListBusinessLogic {
	var presenter: ObjectListPresentationLogic?
	var worker = ObjectWorker(objectsStore: LocalStore())
	var selectedObjectId: String?

	func listObjects(request: ListObjects.FetchObjects.Request) async {
		var objects = await worker.fetchObjects()
		if let excludedId = request.excludedId {
			objects.removeAll(where: { $0.id == excludedId })
		}
		presenter?.presentObjectList(response: ListObjects.FetchObjects.Response(objects: objects ))
	}

	func listObjectSelector() async {
		let objects = await worker.fetchObjects()
		presenter?.presentObjectRelationList(response: .init(objects: objects))
	}

	func addObjectRelation(request: ListObjects.RelationSelector.Request) async {
		if let object = request.object {
			await worker.updateObject(object: object)
		}
	}

	func deleteObject(request: ListObjects.DeleteObject.Request) async {
		await worker.deleteObject(id: request.id)
	}

	func fetchObject(request: CreateAndEditObject.FetchObject.Request) async -> Object? {
		await worker.fetchObject(id: request.id)
	}
}
